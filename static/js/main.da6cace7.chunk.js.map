{"version":3,"sources":["ConfigProvider.tsx","blocks/Common/ConfirmationDialog.tsx","domain.ts","gameplay.ts","blocks/Common/Stepper.tsx","blocks/SelectPlayer.tsx","utils.ts","blocks/HealerNight.tsx","blocks/Common/ShowAuraDialog.tsx","blocks/MediumNight.tsx","blocks/SeerNight.tsx","blocks/WitchNight.tsx","blocks/Common/ShowMysticalDialog.tsx","blocks/WizardNight.tsx","blocks/WolvesNight.tsx","blocks/FarmerDeadDecisionDialog.tsx","blocks/TraitorDialog.tsx","blocks/Night.tsx","localStorage.ts","blocks/SelectPlayers.tsx","Icons/DarkAuraIcon.tsx","Icons/MysticalIcon.tsx","blocks/RoleCard.tsx","blocks/ShowRole.tsx","routing.ts","Router/RouterProvider.tsx","Pages/GameState.ts","Pages/Game.tsx","Pages/Home.tsx","blocks/PlayerCard.tsx","Form/TextField.tsx","Form/validators.ts","blocks/PlayerForm.tsx","Pages/Players.tsx","useLocalStorageState.ts","Pages/Roles.tsx","App.tsx","reportWebVitals.ts","blocks/Common/Waiting.tsx","IntlProvider.tsx","config.ts","index.tsx"],"names":["BuildConfigContext","createContext","option","none","BuildConfigProvider","basepath","children","Provider","value","some","ConfirmationDialog","props","Dialog","open","onClose","onCancel","DialogTitle","title","DialogContent","DialogContentText","content","DialogActions","Button","autoFocus","onClick","color","id","cancelLabel","onConfirm","confirmLabel","roles","primaryWolf","aura","mystical","faction","fitness","secondaryWolf","youngWolf","traitor","seer","wizard","medium","witch","healer","farmer1","farmer2","innkeeper","bard","monk","heremit","priest","sinner","madman","jester","RoleId","t","factions","pipe","record","toArray","array","map","uniq","S","Player","name","NonEmptyString","PlayerData","player","roleId","alive","Phase","showRole","night","GameData","phase","playersData","nightNumber","healerUseHisAbility","farmerTurnedIntoWolves","shuffle","temporaryValue","randomIndex","currentIndex","length","shuffleArray","Math","floor","random","fitnessShuffle","getFitness","collection","startIndex","totalFitness","reduceWithIndex","i","a","b","slice","fitnessSoFar","wolves","firstNightTurns","nightTurns","Stepper","useState","index","setIndex","currentElement","lookup","minLimit","maxLimit","Box","display","width","alignItems","flexDirection","mt","fold","constant","lastScreen","Grid","container","spacing","item","variant","onProceed","SelectPlayer","m","justifyContent","players","xs","sm","md","lg","Chip","label","avatar","Avatar","clickable","onSelected","useFormatRole","formatMessage","useIntl","formatName","formatDescription","HealerNight","dialogOpen","setDialogOpen","selectedPlayer","setSelectedPlayer","Typography","findFirst","v","playersDiedThisNight","filter","p","values","onHealedByHealer","toNullable","ShowAuraDialog","MediumNight","filterMap","chain","findFirstMap","SeerNight","WitchNight","onProtectedByWitch","ShowMysticalDialog","WizardNight","WolvesNight","w","isSome","nonEmptyArray","fromArray","join","doubleTurn","onAttackedByWolves","FarmerDeadDecisionDialog","showWolves","setShowWolves","onWolf","onNormal","onHero","TraitorDialog","Night","match","killedPlayers","setKilledPlayers","showFarmerDecision","setShowFarmerDecision","showTraitorDialog","setShowTraitorDialog","farmerIntoWolf","setFarmerIntoWolf","setHealerUseHisAbility","whenSeer","whenWolves","pa","isNone","wolvesDoubleAttack","farmer","constNull","bestWolf","sortBy","number","Ord","ord","contramap","wolvesHierarchy","head","wolf","whenWizard","whenMedium","whenWitch","whenHealer","turn","onNightResult","getValue","key","codec","localStorage","getItem","fromNullable","flow","json","parse","either","mapLeft","e","console","error","chainW","decode","failure","fromEither","setValue","encode","stringify","bimap","encodedValue","setItem","SelectPlayers","selected","setPlayers","amount","getOrElse","minAmount","findIndex","modifyAt","onNext","disabled","DarkAuraIcon","SvgIcon","d","MysticalIcon","RoleCard","Card","CardContent","gutterBottom","role","ShowRole","playerData","mb","whenMonk","missingRoles","r","whenPriest","data","difference","eq","fromEquals","pr","missingRole","filterWithIndex","onStartGame","home","_tag","game","locations","defaults","end","rolesMatch","lit","then","gameMatch","playersMatch","router","zero","alt","parser","routing","formatLocation","l","format","formatter","parseLocation","s","Route","RouterContext","RouterProvider","skipN","split","pathname","useHashHistory","window","location","search","hash","string","replace","getPathname","fromReadonlyNonEmptyArray","dropLeft","setLocation","handleLocationChanges","useEffect","addEventListener","removeEventListener","internalRouting","useRouter","ctx","useContext","Error","current","navigateTo","newLocation","log","history","pushState","scrollTo","back","initializeRouter","reducer","state","action","type","view","gameData","wolfNumber","shuffledPlayers","playerRoles","pop","push","wolfRoles","otherRoles","wr","turnedIntoWolf","generatePlayersData","payload","Game","useReducer","dispatch","AppBar","position","Toolbar","IconButton","edge","aria-label","ArrowBackSharp","whenInit","_gameData","removeItem","whenSelectPlayers","whenShowRole","whenNight","Home","direction","fullWidth","PlayerCard","deleteDialogOpen","setDeleteDialogOpen","CardMedia","CardActions","disableSpacing","onDelete","TextField","defaultValue","placeholder","onChange","currentTarget","onBlur","issues","helperText","useValidators","errorMessage","intl","nonBlankString","validators","validator","fromPredicate","trim","uniqueString","defined","definedNoExtract","PlayerForm","useFormo","initialValues","fieldValidators","inParallel","playerNames","onSubmit","taskEither","fromIO","fieldProps","handleSubmit","useStyles","makeStyles","theme","createStyles","fab","bottom","right","Players","classes","initValues","reactState","setReactState","useLocalStorageState","playerFormOpen","setPlayerFormOpen","Fab","className","Roles","formatFaction","useFormatFaction","f","Accordion","AccordionSummary","expandIcon","InternalApp","matches","App","buildConfig","useBuildConfigContext","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Waiting","height","CircularProgress","IntlProvider","messages","setMessages","locale","tryCatch","default","identity","BuildConfigCodec","REACT_APP_BASEPATH","optionFromNullable","process","errors","env","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da6cace7.chunk.js","sourcesContent":["import { option } from \"fp-ts\";\nimport { createContext, useContext } from \"react\";\nimport { Option } from \"fp-ts/Option\";\nimport { BuildConfig } from \"./config\";\n\nexport const BuildConfigContext = createContext<Option<BuildConfig>>(\n  option.none\n);\n\ntype Props = BuildConfig & {\n  children: JSX.Element;\n};\n\nexport function BuildConfigProvider({ basepath, children }: Props) {\n  return (\n    <BuildConfigContext.Provider value={option.some({ basepath })}>\n      {children}\n    </BuildConfigContext.Provider>\n  );\n}\n\nexport function useBuildConfigContext() {\n  const ctx = useContext(BuildConfigContext);\n\n  if (option.isNone(ctx)) {\n    throw new Error(\"BuildConfigContext not provided\");\n  }\n\n  return ctx.value;\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype Props = {\n  open: boolean;\n  title: JSX.Element;\n  content: JSX.Element;\n  onConfirm: IO<void>;\n  onCancel: IO<void>;\n  confirmLabel?: string;\n  cancelLabel?: string;\n};\n\nexport function ConfirmationDialog(props: Props) {\n  return (\n    <Dialog open={props.open} onClose={props.onCancel}>\n      <DialogTitle>{props.title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{props.content}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={props.onCancel} color=\"primary\">\n          <FormattedMessage\n            id={props.cancelLabel ? props.cancelLabel : \"cancel\"}\n          />\n        </Button>\n        <Button onClick={props.onConfirm} color=\"primary\">\n          <FormattedMessage\n            id={props.confirmLabel ? props.confirmLabel : \"ok\"}\n          />\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { array, record } from \"fp-ts\";\nimport * as S from \"fp-ts/string\";\nimport { pipe } from \"fp-ts/function\";\nimport * as t from \"io-ts\";\nimport { NonEmptyString } from \"io-ts-types/NonEmptyString\";\n\nexport interface Role {\n  readonly id: RoleId;\n  readonly aura: Aura;\n  readonly mystical: boolean;\n  readonly faction: Faction;\n  readonly fitness: number;\n}\n\nconst primaryWolf: Role = {\n  id: \"primaryWolf\",\n  aura: \"dark\",\n  mystical: false,\n  faction: \"wolf\",\n  fitness: 100,\n};\nconst secondaryWolf: Role = {\n  id: \"secondaryWolf\",\n  aura: \"dark\",\n  mystical: false,\n  faction: \"wolf\",\n  fitness: 75,\n};\nconst youngWolf: Role = {\n  id: \"youngWolf\",\n  aura: \"dark\",\n  mystical: false,\n  faction: \"wolf\",\n  fitness: 50,\n};\nconst traitor: Role = {\n  id: \"traitor\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"wolf\",\n  fitness: 30,\n};\nconst seer: Role = {\n  id: \"seer\",\n  aura: \"light\",\n  mystical: true,\n  faction: \"village\",\n  fitness: 100,\n};\nconst wizard: Role = {\n  id: \"wizard\",\n  aura: \"light\",\n  mystical: true,\n  faction: \"village\",\n  fitness: 30,\n};\nconst medium: Role = {\n  id: \"medium\",\n  aura: \"light\",\n  mystical: true,\n  faction: \"village\",\n  fitness: 30,\n};\nconst witch: Role = {\n  id: \"witch\",\n  aura: \"light\",\n  mystical: true,\n  faction: \"village\",\n  fitness: 50,\n};\nconst healer: Role = {\n  id: \"healer\",\n  aura: \"light\",\n  mystical: true,\n  faction: \"village\",\n  fitness: 40,\n};\nconst farmer1: Role = {\n  id: \"farmer1\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 200,\n};\nconst farmer2: Role = {\n  id: \"farmer2\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 200,\n};\nconst innkeeper: Role = {\n  id: \"innkeeper\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 50,\n};\nconst bard: Role = {\n  id: \"bard\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 50,\n};\nconst monk: Role = {\n  id: \"monk\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 20,\n};\nconst heremit: Role = {\n  id: \"heremit\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 20,\n};\nconst priest: Role = {\n  id: \"priest\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 40,\n};\nconst sinner: Role = {\n  id: \"sinner\",\n  aura: \"dark\",\n  mystical: false,\n  faction: \"village\",\n  fitness: 40,\n};\nconst madman: Role = {\n  id: \"madman\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"general\",\n  fitness: 20,\n};\nconst jester: Role = {\n  id: \"jester\",\n  aura: \"light\",\n  mystical: false,\n  faction: \"general\",\n  fitness: 20,\n};\n\nexport const roles = {\n  primaryWolf,\n  secondaryWolf,\n  youngWolf,\n  traitor,\n  seer,\n  wizard,\n  medium,\n  witch,\n  healer,\n  farmer1,\n  farmer2,\n  innkeeper,\n  bard,\n  monk,\n  heremit,\n  priest,\n  sinner,\n  madman,\n  jester,\n};\n\nconst RoleId = t.keyof({\n  primaryWolf: true,\n  secondaryWolf: true,\n  youngWolf: true,\n  traitor: true,\n  seer: true,\n  wizard: true,\n  medium: true,\n  witch: true,\n  healer: true,\n  farmer1: true,\n  farmer2: true,\n  innkeeper: true,\n  bard: true,\n  monk: true,\n  heremit: true,\n  priest: true,\n  sinner: true,\n  madman: true,\n  jester: true,\n});\nexport type RoleId = t.TypeOf<typeof RoleId>;\n\nexport type Faction = \"village\" | \"general\" | \"wolf\";\n\nexport type Aura = \"light\" | \"dark\";\n\nexport const factions = pipe(\n  roles,\n  record.toArray,\n  array.map(([, r]) => r.faction),\n  array.uniq<Faction>(S.Eq)\n);\n\nexport const Player = t.type({\n  name: NonEmptyString,\n});\nexport type Player = t.TypeOf<typeof Player>;\n\nconst PlayerData = t.type({\n  player: Player,\n  roleId: RoleId,\n  alive: t.boolean,\n});\nexport type PlayerData = t.TypeOf<typeof PlayerData>;\n\nconst Phase = t.keyof({\n  showRole: true,\n  night: true,\n});\n\nexport const GameData = t.type({\n  phase: Phase,\n  playersData: t.array(PlayerData),\n  nightNumber: t.number,\n  healerUseHisAbility: t.boolean,\n  farmerTurnedIntoWolves: t.array(Player),\n});\nexport type GameData = t.TypeOf<typeof GameData>;\n","import { array, eq, option, record, nonEmptyArray } from \"fp-ts\";\nimport { pipe } from \"fp-ts/function\";\nimport { Player, PlayerData, Role, RoleId, roles } from \"./domain\";\nimport { Option } from \"fp-ts/Option\";\nimport { NonEmptyArray } from \"fp-ts/NonEmptyArray\";\n\nfunction shuffle<T>(array: T[]): T[] {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  let shuffleArray = [...array];\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = shuffleArray[currentIndex];\n    shuffleArray[currentIndex] = shuffleArray[randomIndex];\n    shuffleArray[randomIndex] = temporaryValue;\n  }\n  return shuffleArray;\n}\n\nfunction fitnessShuffle<T>(\n  getFitness: (t: T) => number\n): (collection: T[]) => T[] {\n  return (collection: T[]): T[] => {\n    let currentIndex = 0;\n    let shuffleArray: T[] = [...collection];\n    while (currentIndex < shuffleArray.length) {\n      const startIndex = currentIndex;\n      const totalFitness = pipe(\n        shuffleArray,\n        array.reduceWithIndex(0, (i, a, b) =>\n          i >= startIndex ? a + getFitness(b) : a\n        )\n      );\n      const slice = Math.floor(Math.random() * totalFitness);\n\n      let fitnessSoFar = 0;\n      for (let i = currentIndex; i < shuffleArray.length; i++) {\n        fitnessSoFar += getFitness(shuffleArray[i]);\n        if (fitnessSoFar > slice) {\n          const t = shuffleArray[currentIndex];\n          shuffleArray[currentIndex] = shuffleArray[i];\n          shuffleArray[i] = t;\n        }\n      }\n      currentIndex += 1;\n    }\n    return shuffleArray;\n  };\n}\n\nexport function generatePlayersData(players: Player[]): PlayerData[] {\n  const wolfNumber = Math.floor(players.length / 4) - 1;\n\n  const shuffledPlayers = pipe(players, shuffle);\n\n  let playerRoles: { player: Player; roleId: RoleId }[] = [];\n  pipe(\n    shuffledPlayers.pop(),\n    option.fromNullable,\n    option.fold(\n      () => {},\n      (p) => playerRoles.push({ player: p, roleId: roles.primaryWolf.id })\n    )\n  );\n  pipe(\n    shuffledPlayers.pop(),\n    option.fromNullable,\n    option.fold(\n      () => {},\n      (p) => playerRoles.push({ player: p, roleId: roles.seer.id })\n    )\n  );\n\n  const wolfRoles = pipe(\n    [roles.secondaryWolf, roles.youngWolf, roles.traitor],\n    fitnessShuffle((t) => t.fitness)\n  );\n  for (let i = 0; i < wolfNumber; i++) {\n    pipe(\n      shuffledPlayers.pop(),\n      option.fromNullable,\n      option.fold(\n        () => {},\n        (p) => playerRoles.push({ player: p, roleId: wolfRoles[i].id })\n      )\n    );\n  }\n\n  const otherRoles = pipe(\n    roles,\n    record.filter(\n      (r) =>\n        r.id !== \"seer\" &&\n        r.id !== \"primaryWolf\" &&\n        pipe(\n          wolfRoles,\n          array.findFirst((wr) => wr.id === r.id),\n          option.isNone\n        )\n    ),\n    record.toArray,\n    fitnessShuffle(([, t]) => t.fitness)\n  );\n\n  pipe(\n    shuffledPlayers,\n    array.map((p) =>\n      pipe(\n        otherRoles.pop(),\n        option.fromNullable,\n        option.fold(\n          () => {},\n          ([, r]) => playerRoles.push({ player: p, roleId: r.id })\n        )\n      )\n    )\n  );\n\n  return pipe(\n    playerRoles,\n    shuffle,\n    array.map((v) => ({\n      ...v,\n      alive: true,\n      turnedIntoWolf: false,\n    }))\n  );\n}\n\nexport const wolves: RoleId[] = [\"primaryWolf\", \"secondaryWolf\", \"youngWolf\"];\n\ntype NightTurn = \"seer\" | \"wolves\" | \"wizard\" | \"medium\" | \"witch\" | \"healer\";\nexport const firstNightTurns: NightTurn[] = [\"seer\", \"wizard\"];\nexport const nightTurns: NightTurn[] = [\n  \"seer\",\n  \"wolves\",\n  \"wizard\",\n  \"medium\",\n  \"witch\",\n  \"healer\",\n];\n\nexport function foldShowRoleAction(match: {\n  whenWolves: (traitor: Option<Player>) => JSX.Element;\n  whenMonk: (missingRoles: Option<NonEmptyArray<Role>>) => JSX.Element;\n  whenPriest: (sinner: Option<Player>) => JSX.Element;\n}): (data: {\n  roleId: RoleId;\n  playersData: PlayerData[];\n}) => JSX.Element | undefined {\n  return (data: { roleId: RoleId; playersData: PlayerData[] }) => {\n    const { roleId, playersData } = data;\n    if (\n      pipe(\n        wolves,\n        array.findFirst((v) => v === roleId),\n        option.isSome\n      )\n    ) {\n      return match.whenWolves(\n        pipe(\n          playersData,\n          array.findFirst((v) => v.roleId === \"traitor\"),\n          option.map((v) => v.player)\n        )\n      );\n    }\n\n    if (roleId === \"monk\") {\n      return match.whenMonk(\n        pipe(\n          roles,\n          record.toArray,\n          array.map(([, r]) => r),\n          array.difference<Role>(eq.fromEquals((a, b) => a.id === b.id))(\n            pipe(\n              playersData,\n              array.map((pr) => roles[pr.roleId])\n            )\n          ),\n          shuffle,\n          (missingRole): Option<NonEmptyArray<Role>> => {\n            if (missingRole.length === 0) {\n              return option.none;\n            }\n\n            return pipe(\n              missingRole,\n              array.filterWithIndex((i) => i < 2),\n              nonEmptyArray.fromArray\n            );\n          }\n        )\n      );\n    }\n\n    if (roleId === \"priest\") {\n      return match.whenPriest(\n        pipe(\n          playersData,\n          array.findFirstMap((v) =>\n            v.roleId === \"sinner\" ? option.some(v.player) : option.none\n          )\n        )\n      );\n    }\n\n    return;\n  };\n}\n\nexport function foldNightAction(match: {\n  whenSeer: () => JSX.Element;\n  whenWolves: () => JSX.Element;\n  whenWizard: () => JSX.Element;\n  whenMedium: () => JSX.Element;\n  whenWitch: () => JSX.Element;\n  whenHealer: () => JSX.Element;\n}): (turn: NightTurn) => JSX.Element {\n  return (turn: NightTurn) => {\n    switch (turn) {\n      case \"seer\":\n        return match.whenSeer();\n      case \"wolves\":\n        return match.whenWolves();\n      case \"wizard\":\n        return match.whenWizard();\n      case \"medium\":\n        return match.whenMedium();\n      case \"witch\":\n        return match.whenWitch();\n      case \"healer\":\n        return match.whenHealer();\n    }\n  };\n}\n\nexport function wolvesHierarchy(roleId: RoleId) {\n  switch (roleId) {\n    case \"primaryWolf\":\n      return 1;\n    case \"secondaryWolf\":\n      return 2;\n    case \"farmer1\":\n      return 3;\n    case \"farmer2\":\n      return 3;\n    case \"youngWolf\":\n      return 4;\n    default:\n      return 99;\n  }\n}\n","import { Box, Button, Grid } from \"@material-ui/core\";\nimport { array, option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { IO } from \"fp-ts/IO\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype Props<T> = {\n  collection: T[];\n  lastScreen: JSX.Element;\n  content: (e: T) => JSX.Element;\n  onProceed: IO<void>;\n};\n\nexport function Stepper<T>(props: Props<T>) {\n  const [index, setIndex] = useState(0);\n\n  const currentElement = pipe(props.collection, array.lookup(index));\n\n  const minLimit = index === 0;\n  const maxLimit = index === props.collection.length;\n\n  return (\n    <Box display=\"flex\" width={1} alignItems=\"center\" flexDirection=\"column\">\n      <Box mt={2} width={1}>\n        {pipe(\n          currentElement,\n          option.fold(constant(props.lastScreen), props.content)\n        )}\n      </Box>\n\n      <Box mt={2}>\n        <Grid container spacing={2}>\n          {!minLimit && (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => (index > 0 ? setIndex(index - 1) : {})}\n              >\n                <FormattedMessage id=\"prev\" />\n              </Button>\n            </Grid>\n          )}\n          {!maxLimit && (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => setIndex(index + 1)}\n              >\n                <FormattedMessage id=\"next\" />\n              </Button>\n            </Grid>\n          )}\n          {maxLimit && (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={props.onProceed}\n              >\n                <FormattedMessage id=\"start\" />\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n    </Box>\n  );\n}\n","import { Player } from \"../domain\";\nimport { Avatar, Box, Chip, Grid } from \"@material-ui/core\";\nimport { Reader } from \"fp-ts/Reader\";\n\ntype Props = {\n  players: Player[];\n  onSelected: Reader<Player, void>;\n};\n\nexport function SelectPlayer(props: Props) {\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\" m={4}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n        {props.players.map((player) => {\n          return (\n            <Grid\n              key={player.name}\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              container\n              item\n              xs={4}\n              sm={3}\n              md={2}\n              lg={1}\n            >\n              <Chip\n                label={player.name}\n                avatar={<Avatar>{player.name[0]}</Avatar>}\n                clickable\n                color=\"primary\"\n                onClick={() => props.onSelected(player)}\n                variant=\"outlined\"\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n}\n","import { useIntl } from \"react-intl\";\nimport { Faction, RoleId } from \"./domain\";\n\nexport function useFormatRole(): {\n  formatName: (roleId: RoleId) => string;\n  formatDescription: (roleId: RoleId) => string;\n} {\n  const { formatMessage } = useIntl();\n\n  const formatName = (roleId: RoleId) => {\n    switch (roleId) {\n      case \"primaryWolf\":\n        return formatMessage({ id: \"role.primaryWolf.name\" });\n      case \"secondaryWolf\":\n        return formatMessage({ id: \"role.secondaryWolf.name\" });\n      case \"youngWolf\":\n        return formatMessage({ id: \"role.youngWolf.name\" });\n      case \"traitor\":\n        return formatMessage({ id: \"role.traitor.name\" });\n      case \"seer\":\n        return formatMessage({ id: \"role.seer.name\" });\n      case \"wizard\":\n        return formatMessage({ id: \"role.wizard.name\" });\n      case \"medium\":\n        return formatMessage({ id: \"role.medium.name\" });\n      case \"witch\":\n        return formatMessage({ id: \"role.witch.name\" });\n      case \"healer\":\n        return formatMessage({ id: \"role.healer.name\" });\n      case \"farmer1\":\n        return formatMessage({ id: \"role.farmer.name\" });\n      case \"farmer2\":\n        return formatMessage({ id: \"role.farmer.name\" });\n      case \"innkeeper\":\n        return formatMessage({ id: \"role.innkeeper.name\" });\n      case \"bard\":\n        return formatMessage({ id: \"role.bard.name\" });\n      case \"monk\":\n        return formatMessage({ id: \"role.monk.name\" });\n      case \"heremit\":\n        return formatMessage({ id: \"role.heremit.name\" });\n      case \"priest\":\n        return formatMessage({ id: \"role.priest.name\" });\n      case \"sinner\":\n        return formatMessage({ id: \"role.sinner.name\" });\n      case \"madman\":\n        return formatMessage({ id: \"role.madman.name\" });\n      case \"jester\":\n        return formatMessage({ id: \"role.jester.name\" });\n    }\n  };\n\n  const formatDescription = (roleId: RoleId) => {\n    switch (roleId) {\n      case \"primaryWolf\":\n        return formatMessage({ id: \"role.primaryWolf.description\" });\n      case \"secondaryWolf\":\n        return formatMessage({ id: \"role.secondaryWolf.description\" });\n      case \"youngWolf\":\n        return formatMessage({ id: \"role.youngWolf.description\" });\n      case \"traitor\":\n        return formatMessage({ id: \"role.traitor.description\" });\n      case \"seer\":\n        return formatMessage({ id: \"role.seer.description\" });\n      case \"wizard\":\n        return formatMessage({ id: \"role.wizard.description\" });\n      case \"medium\":\n        return formatMessage({ id: \"role.medium.description\" });\n      case \"witch\":\n        return formatMessage({ id: \"role.witch.description\" });\n      case \"healer\":\n        return formatMessage({ id: \"role.healer.description\" });\n      case \"farmer1\":\n        return formatMessage({ id: \"role.farmer.description\" });\n      case \"farmer2\":\n        return formatMessage({ id: \"role.farmer.description\" });\n      case \"innkeeper\":\n        return formatMessage({ id: \"role.innkeeper.description\" });\n      case \"bard\":\n        return formatMessage({ id: \"role.bard.description\" });\n      case \"monk\":\n        return formatMessage({ id: \"role.monk.description\" });\n      case \"heremit\":\n        return formatMessage({ id: \"role.heremit.description\" });\n      case \"priest\":\n        return formatMessage({ id: \"role.priest.description\" });\n      case \"sinner\":\n        return formatMessage({ id: \"role.sinner.description\" });\n      case \"madman\":\n        return formatMessage({ id: \"role.madman.description\" });\n      case \"jester\":\n        return formatMessage({ id: \"role.jester.description\" });\n    }\n  };\n\n  return { formatName, formatDescription };\n}\n\nexport function useFormatFaction(): (faction: Faction) => string {\n  const { formatMessage } = useIntl();\n\n  const formatFaction = (faction: Faction) => {\n    switch (faction) {\n      case \"general\":\n        return formatMessage({ id: \"faction.general\" });\n      case \"wolf\":\n        return formatMessage({ id: \"faction.wolf\" });\n      case \"village\":\n        return formatMessage({ id: \"faction.village\" });\n    }\n  };\n\n  return formatFaction;\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData } from \"../domain\";\nimport { SelectPlayer } from \"./SelectPlayer\";\nimport { Option } from \"fp-ts/Option\";\nimport { Reader } from \"fp-ts/Reader\";\nimport { ConfirmationDialog } from \"./Common/ConfirmationDialog\";\nimport { useFormatRole } from \"../utils\";\n\ntype Props = {\n  playersData: PlayerData[];\n  playersDiedThisNight: Player[];\n  onHealedByHealer: Reader<Player, void>;\n};\n\nexport function HealerNight(props: Props) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Option<Player>>(\n    option.none\n  );\n\n  const { formatName } = useFormatRole();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\">\n      <Typography variant=\"h6\">\n        <FormattedMessage id={formatName(\"healer\")} />\n      </Typography>\n      {pipe(\n        props.playersData,\n        array.findFirst((v) => v.roleId === \"healer\"),\n        option.fold(\n          constant(\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.night.roleNotPresent\" />\n            </Typography>\n          ),\n          (healer) =>\n            healer.alive ? (\n              <Box\n                display=\"flex\"\n                width={1}\n                alignItems=\"center\"\n                flexDirection=\"column\"\n              >\n                <Typography variant=\"h4\">\n                  <FormattedMessage id=\"role.healer.name\" />\n                  {`: ${healer.player.name}`}\n                </Typography>\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.healer.action\" />\n                </Typography>\n\n                <SelectPlayer\n                  players={pipe(\n                    props.playersDiedThisNight,\n                    array.filter((p) => p.name !== healer.player.name)\n                  )}\n                  onSelected={(p) => {\n                    setSelectedPlayer(option.some(p));\n                    setDialogOpen(true);\n                  }}\n                />\n                {pipe(\n                  selectedPlayer,\n                  option.map((v) => (\n                    <ConfirmationDialog\n                      open={dialogOpen}\n                      title={\n                        <FormattedMessage id=\"game.night.healer.confirmation.title\" />\n                      }\n                      content={\n                        <FormattedMessage\n                          id=\"game.night.healer.confirmation.content\"\n                          values={{ name: v.name }}\n                        />\n                      }\n                      onCancel={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                      }}\n                      onConfirm={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                        props.onHealedByHealer(v);\n                      }}\n                    />\n                  )),\n                  option.toNullable\n                )}\n              </Box>\n            ) : (\n              <Box display=\"flex\" width={1} flexDirection=\"column\">\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.roleDied\" />\n                </Typography>\n              </Box>\n            )\n        )\n      )}\n    </Box>\n  );\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Aura, Player } from \"../../domain\";\n\ntype Props = {\n  open: boolean;\n  player: Player;\n  aura: Aura;\n  onClose: IO<void>;\n};\n\nexport function ShowAuraDialog(props: Props) {\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle>\n        <FormattedMessage\n          id=\"showAuraDialog.title\"\n          values={{ name: props.player.name }}\n        />\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          <FormattedMessage id={props.aura === \"dark\" ? \"dark\" : \"light\"} />\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={props.onClose} color=\"primary\">\n          <FormattedMessage id=\"close\" />\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData, roles } from \"../domain\";\nimport { SelectPlayer } from \"./SelectPlayer\";\nimport { Option } from \"fp-ts/Option\";\nimport { ShowAuraDialog } from \"./Common/ShowAuraDialog\";\nimport { useFormatRole } from \"../utils\";\n\ntype Props = {\n  playersData: PlayerData[];\n};\n\nexport function MediumNight(props: Props) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Option<Player>>(\n    option.none\n  );\n\n  const { formatName } = useFormatRole();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\">\n      <Typography variant=\"h6\">\n        <FormattedMessage id={formatName(\"medium\")} />\n      </Typography>\n      {pipe(\n        props.playersData,\n        array.findFirst((v) => v.roleId === \"medium\"),\n        option.fold(\n          constant(\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.night.roleNotPresent\" />\n            </Typography>\n          ),\n          (seer) =>\n            seer.alive ? (\n              <Box\n                display=\"flex\"\n                width={1}\n                alignItems=\"center\"\n                flexDirection=\"column\"\n              >\n                <Typography variant=\"h4\">\n                  <FormattedMessage id=\"role.medium.name\" />\n                  {`: ${seer.player.name}`}\n                </Typography>\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.medium.action\" />\n                </Typography>\n\n                <SelectPlayer\n                  players={pipe(\n                    props.playersData,\n                    array.filterMap((v) =>\n                      v.roleId !== \"medium\" && !v.alive\n                        ? option.some(v.player)\n                        : option.none\n                    )\n                  )}\n                  onSelected={(p) => {\n                    setSelectedPlayer(option.some(p));\n                    setDialogOpen(true);\n                  }}\n                />\n                {pipe(\n                  selectedPlayer,\n                  option.chain((p) =>\n                    pipe(\n                      props.playersData,\n                      array.findFirstMap((v) =>\n                        v.player.name === p.name\n                          ? option.some({\n                              player: v.player,\n                              aura: roles[v.roleId].aura,\n                            })\n                          : option.none\n                      )\n                    )\n                  ),\n                  option.map((v) => (\n                    <ShowAuraDialog\n                      open={dialogOpen}\n                      player={v.player}\n                      aura={v.aura}\n                      onClose={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                      }}\n                    />\n                  )),\n                  option.toNullable\n                )}\n              </Box>\n            ) : (\n              <Box display=\"flex\" width={1} flexDirection=\"column\">\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.roleDied\" />\n                </Typography>\n              </Box>\n            )\n        )\n      )}\n    </Box>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData, roles } from \"../domain\";\nimport { SelectPlayer } from \"./SelectPlayer\";\nimport { Option } from \"fp-ts/Option\";\nimport { ShowAuraDialog } from \"./Common/ShowAuraDialog\";\nimport { useFormatRole } from \"../utils\";\n\ntype Props = {\n  playersData: PlayerData[];\n};\n\nexport function SeerNight(props: Props) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Option<Player>>(\n    option.none\n  );\n\n  const { formatName } = useFormatRole();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\">\n      <Typography variant=\"h6\">\n        <FormattedMessage id={formatName(\"seer\")} />\n      </Typography>\n      {pipe(\n        props.playersData,\n        array.findFirst((v) => v.roleId === \"seer\"),\n        option.fold(\n          constant(\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.night.roleNotPresent\" />\n            </Typography>\n          ),\n          (seer) =>\n            seer.alive ? (\n              <Box\n                display=\"flex\"\n                width={1}\n                alignItems=\"center\"\n                flexDirection=\"column\"\n              >\n                <Typography variant=\"h4\">\n                  <FormattedMessage id=\"role.seer.name\" />\n                  {`: ${seer.player.name}`}\n                </Typography>\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.seer.action\" />\n                </Typography>\n\n                <SelectPlayer\n                  players={pipe(\n                    props.playersData,\n                    array.filterMap((v) =>\n                      v.roleId !== \"seer\" && v.alive\n                        ? option.some(v.player)\n                        : option.none\n                    )\n                  )}\n                  onSelected={(p) => {\n                    setSelectedPlayer(option.some(p));\n                    setDialogOpen(true);\n                  }}\n                />\n                {pipe(\n                  selectedPlayer,\n                  option.chain((p) =>\n                    pipe(\n                      props.playersData,\n                      array.findFirstMap((v) =>\n                        v.player.name === p.name\n                          ? option.some({\n                              player: v.player,\n                              aura: roles[v.roleId].aura,\n                            })\n                          : option.none\n                      )\n                    )\n                  ),\n                  option.map((v) => (\n                    <ShowAuraDialog\n                      open={dialogOpen}\n                      player={v.player}\n                      aura={v.aura}\n                      onClose={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                      }}\n                    />\n                  )),\n                  option.toNullable\n                )}\n              </Box>\n            ) : (\n              <Box display=\"flex\" width={1} flexDirection=\"column\">\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.roleDied\" />\n                </Typography>\n              </Box>\n            )\n        )\n      )}\n    </Box>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData } from \"../domain\";\nimport { SelectPlayer } from \"./SelectPlayer\";\nimport { Option } from \"fp-ts/Option\";\nimport { Reader } from \"fp-ts/Reader\";\nimport { ConfirmationDialog } from \"./Common/ConfirmationDialog\";\nimport { useFormatRole } from \"../utils\";\n\ntype Props = {\n  playersData: PlayerData[];\n  onProtectedByWitch: Reader<Player, void>;\n};\n\nexport function WitchNight(props: Props) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Option<Player>>(\n    option.none\n  );\n\n  const { formatName } = useFormatRole();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\">\n      <Typography variant=\"h6\">\n        <FormattedMessage id={formatName(\"witch\")} />\n      </Typography>\n      {pipe(\n        props.playersData,\n        array.findFirst((v) => v.roleId === \"witch\"),\n        option.fold(\n          constant(\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.night.roleNotPresent\" />\n            </Typography>\n          ),\n          (witch) =>\n            witch.alive ? (\n              <Box\n                display=\"flex\"\n                width={1}\n                alignItems=\"center\"\n                flexDirection=\"column\"\n              >\n                <Typography variant=\"h4\">\n                  <FormattedMessage id=\"role.medium.name\" />\n                  {`: ${witch.player.name}`}\n                </Typography>\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.healer.action\" />\n                </Typography>\n\n                <SelectPlayer\n                  players={pipe(\n                    props.playersData,\n                    array.filterMap((v) =>\n                      v.alive ? option.some(v.player) : option.none\n                    )\n                  )}\n                  onSelected={(p) => {\n                    setSelectedPlayer(option.some(p));\n                    setDialogOpen(true);\n                  }}\n                />\n                {pipe(\n                  selectedPlayer,\n                  option.map((v) => (\n                    <ConfirmationDialog\n                      open={dialogOpen}\n                      title={\n                        <FormattedMessage id=\"game.night.healer.confirmation.title\" />\n                      }\n                      content={\n                        <FormattedMessage\n                          id=\"game.night.healer.confirmation.content\"\n                          values={{ name: v.name }}\n                        />\n                      }\n                      onCancel={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                      }}\n                      onConfirm={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                        props.onProtectedByWitch(v);\n                      }}\n                    />\n                  )),\n                  option.toNullable\n                )}\n              </Box>\n            ) : (\n              <Box display=\"flex\" width={1} flexDirection=\"column\">\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.roleDied\" />\n                </Typography>\n              </Box>\n            )\n        )\n      )}\n    </Box>\n  );\n}\n","import { Button, Dialog, DialogActions, DialogTitle } from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player } from \"../../domain\";\n\ntype Props = {\n  open: boolean;\n  player: Player;\n  mystical: boolean;\n  onClose: IO<void>;\n};\n\nexport function ShowMysticalDialog(props: Props) {\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle>\n        <FormattedMessage\n          id={\n            props.mystical\n              ? \"showMysticalDialog.mystical\"\n              : \"showMysticalDialog.nonMystical\"\n          }\n          values={{ name: props.player.name }}\n        />\n      </DialogTitle>\n      <DialogActions>\n        <Button autoFocus onClick={props.onClose} color=\"primary\">\n          <FormattedMessage id=\"close\" />\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData, roles } from \"../domain\";\nimport { SelectPlayer } from \"./SelectPlayer\";\nimport { Option } from \"fp-ts/Option\";\nimport { ShowMysticalDialog } from \"./Common/ShowMysticalDialog\";\nimport { useFormatRole } from \"../utils\";\n\ntype Props = {\n  playersData: PlayerData[];\n};\n\nexport function WizardNight(props: Props) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Option<Player>>(\n    option.none\n  );\n\n  const { formatName } = useFormatRole();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\">\n      <Typography variant=\"h6\">\n        <FormattedMessage id={formatName(\"wizard\")} />\n      </Typography>\n      {pipe(\n        props.playersData,\n        array.findFirst((v) => v.roleId === \"wizard\"),\n        option.fold(\n          constant(\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.night.roleNotPresent\" />\n            </Typography>\n          ),\n          (wizard) =>\n            wizard.alive ? (\n              <Box\n                display=\"flex\"\n                width={1}\n                alignItems=\"center\"\n                flexDirection=\"column\"\n              >\n                <Typography variant=\"h4\">\n                  <FormattedMessage id=\"role.wizard.name\" />\n                  {`: ${wizard.player.name}`}\n                </Typography>\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.wizard.action\" />\n                </Typography>\n\n                <SelectPlayer\n                  players={pipe(\n                    props.playersData,\n                    array.filterMap((v) =>\n                      v.roleId !== \"wizard\" && v.alive\n                        ? option.some(v.player)\n                        : option.none\n                    )\n                  )}\n                  onSelected={(p) => {\n                    setSelectedPlayer(option.some(p));\n                    setDialogOpen(true);\n                  }}\n                />\n                {pipe(\n                  selectedPlayer,\n                  option.chain((p) =>\n                    pipe(\n                      props.playersData,\n                      array.findFirstMap((v) =>\n                        v.player.name === p.name\n                          ? option.some({\n                              player: v.player,\n                              mystical: roles[v.roleId].mystical,\n                            })\n                          : option.none\n                      )\n                    )\n                  ),\n                  option.map((v) => (\n                    <ShowMysticalDialog\n                      open={dialogOpen}\n                      player={v.player}\n                      mystical={v.mystical}\n                      onClose={() => {\n                        setSelectedPlayer(option.none);\n                        setDialogOpen(false);\n                      }}\n                    />\n                  )),\n                  option.toNullable\n                )}\n              </Box>\n            ) : (\n              <Box display=\"flex\" width={1} flexDirection=\"column\">\n                <Typography variant=\"h6\">\n                  <FormattedMessage id=\"game.night.roleDied\" />\n                </Typography>\n              </Box>\n            )\n        )\n      )}\n    </Box>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option, nonEmptyArray } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData } from \"../domain\";\nimport { SelectPlayer } from \"./SelectPlayer\";\nimport { Option } from \"fp-ts/Option\";\nimport { wolves } from \"../gameplay\";\nimport { Reader } from \"fp-ts/Reader\";\nimport { ConfirmationDialog } from \"./Common/ConfirmationDialog\";\n\ntype Props = {\n  playersData: PlayerData[];\n  onAttackedByWolves: Reader<Player, void>;\n  doubleTurn: boolean;\n};\n\nexport function WolvesNight(props: Props) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedPlayer, setSelectedPlayer] = useState<Option<Player>>(\n    option.none\n  );\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\">\n      {pipe(\n        props.playersData,\n        array.filter(\n          (v) =>\n            pipe(\n              wolves,\n              array.findFirst((w) => w === v.roleId),\n              option.isSome\n            ) && v.alive\n        ),\n        nonEmptyArray.fromArray,\n        option.fold(\n          constant(\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.night.roleNotPresent\" />\n            </Typography>\n          ),\n          (wolves) => (\n            <Box\n              display=\"flex\"\n              width={1}\n              alignItems=\"center\"\n              flexDirection=\"column\"\n            >\n              <Typography variant=\"h4\">\n                <FormattedMessage id=\"faction.wolf\" />\n                {`: ${pipe(\n                  wolves,\n                  nonEmptyArray.map((w) => w.player.name)\n                ).join(\", \")}`}\n              </Typography>\n              <Typography variant=\"h6\">\n                <FormattedMessage\n                  id={\n                    props.doubleTurn\n                      ? \"game.night.wolves.action\"\n                      : \"game.night.wolves.action\"\n                  }\n                />\n              </Typography>\n\n              <SelectPlayer\n                players={pipe(\n                  props.playersData,\n                  array.filterMap((v) =>\n                    v.alive ? option.some(v.player) : option.none\n                  )\n                )}\n                onSelected={(p) => {\n                  setSelectedPlayer(option.some(p));\n                  setDialogOpen(true);\n                }}\n              />\n              {pipe(\n                selectedPlayer,\n                option.map((v) => (\n                  <ConfirmationDialog\n                    open={dialogOpen}\n                    title={\n                      <FormattedMessage id=\"game.night.wolves.confirmation.title\" />\n                    }\n                    content={\n                      <FormattedMessage\n                        id=\"game.night.wolves.confirmation.content\"\n                        values={{ name: v.name }}\n                      />\n                    }\n                    onCancel={() => {\n                      setSelectedPlayer(option.none);\n                      setDialogOpen(false);\n                    }}\n                    onConfirm={() => {\n                      setSelectedPlayer(option.none);\n                      setDialogOpen(false);\n                      props.onAttackedByWolves(v);\n                    }}\n                  />\n                )),\n                option.toNullable\n              )}\n            </Box>\n          )\n        )\n      )}\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player } from \"../domain\";\n\ntype Props = {\n  player: Player;\n  onHero: IO<void>;\n  onNormal: IO<void>;\n  onWolf: IO<void>;\n};\n\nexport function FarmerDeadDecisionDialog(props: Props) {\n  const [showWolves, setShowWolves] = useState(false);\n\n  return (\n    <Dialog open={true}>\n      <DialogTitle>\n        <FormattedMessage\n          id=\"farmerDeadDialog.title\"\n          values={{ name: props.player.name }}\n        />\n      </DialogTitle>\n      <DialogContent>\n        {!showWolves ? (\n          <Box display=\"flex\" width={1} flexDirection=\"column\">\n            <Button onClick={props.onNormal} color=\"primary\">\n              <FormattedMessage id=\"farmerDeadDialog.killButton\" />\n            </Button>\n            <Button onClick={props.onHero} color=\"primary\">\n              <FormattedMessage id=\"farmerDeadDialog.heroButton\" />\n            </Button>\n            <Button onClick={() => setShowWolves(true)} color=\"primary\">\n              <FormattedMessage id=\"farmerDeadDialog.wolfDescendant\" />\n            </Button>\n          </Box>\n        ) : (\n          <Box display=\"flex\" width={1} flexDirection=\"column\">\n            <Typography variant=\"h6\">\n              <FormattedMessage\n                id=\"farmerDeadDialog.showWolves\"\n                values={{ name: props.player.name }}\n              />\n            </Typography>\n            <Button onClick={props.onWolf} color=\"primary\">\n              <FormattedMessage id=\"close\" />\n            </Button>\n          </Box>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player } from \"../domain\";\n\ntype Props = {\n  player: Player;\n  onClose: IO<void>;\n};\n\nexport function TraitorDialog(props: Props) {\n  return (\n    <Dialog open={true}>\n      <DialogTitle>\n        <FormattedMessage\n          id=\"farmerDeadDialog.title\"\n          values={{ name: props.player.name }}\n        />\n      </DialogTitle>\n      <DialogContent>\n        <Box display=\"flex\" width={1} flexDirection=\"column\">\n          <Typography variant=\"h6\">\n            <FormattedMessage\n              id=\"traitorDialog.showWolves\"\n              values={{ name: props.player.name }}\n            />\n          </Typography>\n          <Button onClick={props.onClose} color=\"primary\">\n            <FormattedMessage id=\"close\" />\n          </Button>\n        </Box>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { array, option, number, ord } from \"fp-ts\";\nimport { constant, constNull, pipe } from \"fp-ts/function\";\nimport { Reader } from \"fp-ts/Reader\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player, PlayerData } from \"../domain\";\nimport {\n  firstNightTurns,\n  foldNightAction,\n  nightTurns,\n  wolves,\n  wolvesHierarchy,\n} from \"../gameplay\";\nimport { Stepper } from \"./Common/Stepper\";\nimport { HealerNight } from \"./HealerNight\";\nimport { MediumNight } from \"./MediumNight\";\nimport { SeerNight } from \"./SeerNight\";\nimport { WitchNight } from \"./WitchNight\";\nimport { WizardNight } from \"./WizardNight\";\nimport { WolvesNight } from \"./WolvesNight\";\nimport { Option } from \"fp-ts/Option\";\nimport { FarmerDeadDecisionDialog } from \"./FarmerDeadDecisionDialog\";\nimport { TraitorDialog } from \"./TraitorDialog\";\n\ntype Props = {\n  playersData: PlayerData[];\n  nightNumber: number;\n  wolvesDoubleAttack: boolean;\n  onNightResult: Reader<\n    {\n      killedPlayers: Player[];\n      farmerIntoWolf: Option<Player>;\n      healerUseHisAbility: boolean;\n    },\n    void\n  >;\n};\n\nexport function Night(props: Props) {\n  const [killedPlayers, setKilledPlayers] = useState<Player[]>([]);\n  const [showFarmerDecision, setShowFarmerDecision] = useState<Option<Player>>(\n    option.none\n  );\n  const [showTraitorDialog, setShowTraitorDialog] = useState<Option<Player>>(\n    option.none\n  );\n  const [farmerIntoWolf, setFarmerIntoWolf] = useState<Option<Player>>(\n    option.none\n  );\n  const [healerUseHisAbility, setHealerUseHisAbility] = useState(false);\n\n  return (\n    <Box display=\"flex\" width={1} alignItems=\"center\" flexDirection=\"column\">\n      <Box mt={2}>\n        <Typography variant=\"h5\">\n          <FormattedMessage id=\"game.night.title\" />\n        </Typography>\n      </Box>\n      <Box mt={2} width={1}>\n        <Stepper\n          lastScreen={\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.showRole.finish\" />\n            </Typography>\n          }\n          collection={props.nightNumber === 1 ? firstNightTurns : nightTurns}\n          content={foldNightAction({\n            whenSeer: () => <SeerNight playersData={props.playersData} />,\n            whenWolves: () => (\n              <Box display=\"flex\" width={1} flexDirection=\"column\">\n                <WolvesNight\n                  playersData={pipe(\n                    props.playersData,\n                    array.filter((p) =>\n                      pipe(\n                        killedPlayers,\n                        array.findFirst((pa) => pa.name === p.player.name),\n                        option.isNone\n                      )\n                    )\n                  )}\n                  doubleTurn={props.wolvesDoubleAttack}\n                  onAttackedByWolves={(pa) => {\n                    const heremit = pipe(\n                      props.playersData,\n                      array.findFirst((p) => p.roleId === \"heremit\"),\n                      option.chain((p) =>\n                        pa.name === p.player.name ? option.some(p) : option.none\n                      )\n                    );\n\n                    const traitor = pipe(\n                      props.playersData,\n                      array.findFirst((p) => p.roleId === \"traitor\"),\n                      option.chain((p) =>\n                        pa.name === p.player.name ? option.some(p) : option.none\n                      )\n                    );\n\n                    const farmer = pipe(\n                      props.playersData,\n                      array.findFirst(\n                        (p) => p.roleId === \"farmer1\" || p.roleId === \"farmer2\"\n                      ),\n                      option.chain((p) =>\n                        pa.name === p.player.name ? option.some(p) : option.none\n                      )\n                    );\n\n                    if (option.isNone(heremit)) {\n                      pipe(\n                        farmer,\n                        option.fold(\n                          () =>\n                            pipe(\n                              traitor,\n                              option.fold(\n                                () => setKilledPlayers([...killedPlayers, pa]),\n                                (farmer) =>\n                                  setShowTraitorDialog(\n                                    option.some(farmer.player)\n                                  )\n                              )\n                            ),\n                          (farmer) =>\n                            setShowFarmerDecision(option.some(farmer.player))\n                        )\n                      );\n                    }\n                  }}\n                />\n                {pipe(\n                  showFarmerDecision,\n                  option.fold(constNull, (farmer) => (\n                    <FarmerDeadDecisionDialog\n                      player={farmer}\n                      onHero={() => {\n                        const bestWolf = pipe(\n                          props.playersData,\n                          array.filter(\n                            (v) =>\n                              pipe(\n                                wolves,\n                                array.findFirst((w) => w === v.roleId),\n                                option.isSome\n                              ) && v.alive\n                          ),\n                          array.sortBy([\n                            pipe(\n                              number.Ord,\n                              ord.contramap((p: PlayerData) =>\n                                wolvesHierarchy(p.roleId)\n                              )\n                            ),\n                          ]),\n                          array.head\n                        );\n                        setKilledPlayers([\n                          ...killedPlayers,\n                          farmer,\n                          ...pipe(\n                            bestWolf,\n                            option.fold(constant([]), (wolf) => [wolf.player])\n                          ),\n                        ]);\n                        setShowFarmerDecision(option.none);\n                      }}\n                      onNormal={() => {\n                        setKilledPlayers([...killedPlayers, farmer]);\n                        setShowFarmerDecision(option.none);\n                      }}\n                      onWolf={() => {\n                        setFarmerIntoWolf(option.some(farmer));\n                        setShowFarmerDecision(option.none);\n                      }}\n                    />\n                  ))\n                )}\n                {pipe(\n                  showTraitorDialog,\n                  option.fold(constNull, (traitor) => (\n                    <TraitorDialog\n                      player={traitor}\n                      onClose={() => setShowTraitorDialog(option.none)}\n                    />\n                  ))\n                )}\n              </Box>\n            ),\n            whenWizard: () => <WizardNight playersData={props.playersData} />,\n            whenMedium: () => <MediumNight playersData={props.playersData} />,\n            whenWitch: () => (\n              <WitchNight\n                playersData={props.playersData}\n                onProtectedByWitch={(t) =>\n                  setKilledPlayers(\n                    pipe(\n                      killedPlayers,\n                      array.filter((p) => p.name !== t.name)\n                    )\n                  )\n                }\n              />\n            ),\n            whenHealer: () => (\n              <HealerNight\n                playersData={props.playersData}\n                playersDiedThisNight={killedPlayers}\n                onHealedByHealer={(t) => {\n                  setKilledPlayers(\n                    pipe(\n                      killedPlayers,\n                      array.filter((pa) => pa.name !== t.name)\n                    )\n                  );\n                  setHealerUseHisAbility(true);\n                }}\n              />\n            ),\n          })}\n          onProceed={() =>\n            props.onNightResult({\n              killedPlayers,\n              farmerIntoWolf,\n              healerUseHisAbility,\n            })\n          }\n        />\n      </Box>\n    </Box>\n  );\n}\n","import { Type } from \"io-ts\";\nimport { Option } from \"fp-ts/Option\";\nimport { flow, pipe } from \"fp-ts/function\";\nimport { either, json, option } from \"fp-ts\";\nimport { failure } from \"io-ts/lib/PathReporter\";\nimport { Either } from \"fp-ts/Either\";\n\nexport function getValue<T, TT>(key: string, codec: Type<T, TT>): Option<T> {\n  return pipe(\n    localStorage.getItem(key),\n    option.fromNullable,\n    option.chain(\n      flow(\n        json.parse,\n        either.mapLeft((e) => {\n          console.error(\"Json parse error: \", e);\n          return e;\n        }),\n        either.chainW(\n          flow(\n            codec.decode,\n            either.mapLeft((e) => {\n              console.error(\"Decoding error: \", failure(e).join(\"\\n\"));\n              return e;\n            })\n          )\n        ),\n        option.fromEither\n      )\n    )\n  );\n}\n\nexport function setValue<T, TT>(\n  key: string,\n  codec: Type<T, TT>,\n  value: T\n): Either<unknown, void> {\n  return pipe(\n    value,\n    codec.encode,\n    json.stringify,\n    either.bimap(\n      (e) => {\n        console.error(e);\n        return e;\n      },\n      (encodedValue) => localStorage.setItem(key, encodedValue)\n    )\n  );\n}\n","import { Player } from \"../domain\";\nimport * as t from \"io-ts\";\nimport { getValue } from \"../localStorage\";\nimport { useState } from \"react\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { array, option } from \"fp-ts\";\nimport { Avatar, Box, Button, Chip, Grid, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Reader } from \"fp-ts/Reader\";\n\ntype Props = {\n  onNext: Reader<Player[], void>;\n};\n\nconst minAmount = 4;\n\nexport function SelectPlayers(props: Props) {\n  const [players, setPlayers] = useState(\n    pipe(\n      getValue(\"players\", t.array(Player)),\n      option.map((players) =>\n        pipe(\n          players,\n          array.map((p) => ({ player: p, selected: false }))\n        )\n      )\n    )\n  );\n\n  const amount = pipe(\n    players,\n    option.map(\n      (p) =>\n        pipe(\n          p,\n          array.filter((v) => v.selected)\n        ).length\n    ),\n    option.getOrElse(constant(0))\n  );\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\" m={4}>\n      <Typography variant=\"h6\">\n        <FormattedMessage\n          id=\"game.players.playerNumber\"\n          values={{\n            amount,\n            minAmount,\n          }}\n        />\n      </Typography>\n      <Box display=\"flex\" width={1} flexDirection=\"column\" m={4}>\n        {pipe(\n          players,\n          option.fold(\n            constant(\n              <Typography variant=\"h3\">\n                <FormattedMessage id=\"game.players.noPlayersDefined\" />\n              </Typography>\n            ),\n            (players) => (\n              <Grid\n                container\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                spacing={2}\n              >\n                {players.map((value) => {\n                  return (\n                    <Grid\n                      key={value.player.name}\n                      justifyContent=\"center\"\n                      alignItems=\"center\"\n                      container\n                      item\n                      xs={4}\n                      sm={3}\n                      md={2}\n                      lg={1}\n                    >\n                      <Chip\n                        label={value.player.name}\n                        avatar={<Avatar>{value.player.name[0]}</Avatar>}\n                        clickable\n                        color=\"primary\"\n                        onClick={() =>\n                          setPlayers(\n                            pipe(\n                              players,\n                              array.findIndex(\n                                (p) => p.player.name === value.player.name\n                              ),\n                              option.chain((index) =>\n                                pipe(\n                                  players,\n                                  array.modifyAt(index, (p) => ({\n                                    ...p,\n                                    selected: !p.selected,\n                                  }))\n                                )\n                              )\n                            )\n                          )\n                        }\n                        variant={value.selected ? \"default\" : \"outlined\"}\n                      />\n                    </Grid>\n                  );\n                })}\n              </Grid>\n            )\n          )\n        )}\n      </Box>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() =>\n          props.onNext(\n            pipe(\n              players,\n              option.map((players) =>\n                pipe(\n                  players,\n                  array.filterMap((p) =>\n                    p.selected ? option.some(p.player) : option.none\n                  )\n                )\n              ),\n              option.getOrElse<Player[]>(constant([]))\n            )\n          )\n        }\n        disabled={amount < minAmount}\n      >\n        <FormattedMessage id=\"next\" />\n      </Button>\n    </Box>\n  );\n}\n","import { SvgIcon, SvgIconProps } from \"@material-ui/core\";\n\nexport function DarkAuraIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M12 1.5c-5.398 0-9.75 4.352-9.75 9.602v4.273a2.53 2.53 0 002.55 2.55c.45 0 1.2.223 1.2.825V21c0 .3.227.602.523.75 1.801.602 3.676.898 5.477.898 1.8 0 3.676-.296 5.477-.898.296-.074.523-.375.523-.75v-2.25c0-.602.75-.824 1.2-.824a2.53 2.53 0 002.55-2.551v-4.273c0-5.25-4.352-9.602-9.75-9.602zM9.227 16.273l-.903.153c-.148 0-.3.074-.523.074-.602 0-1.125-.227-1.653-.602a2.666 2.666 0 01-.898-1.949v-.148A2.53 2.53 0 017.8 11.25h.9c.823 0 1.5.375 2.027.977.449.597.671 1.421.449 2.171-.227.977-1.051 1.653-1.95 1.875zm3.824 1.653c-.074.074-.153.074-.301.074-.3 0-.523-.148-.676-.45L12 17.399l-.074.153c-.153.375-.602.523-.977.3-.375-.152-.523-.601-.3-.976l.75-1.5c.226-.523 1.05-.523 1.351 0l.75 1.5c.074.375-.074.824-.45 1.05zm5.699-3.977c0 .75-.375 1.5-.898 1.95a2.632 2.632 0 01-1.653.601c-.148 0-.3 0-.523-.074l-.903-.153c-.972-.222-1.722-.898-1.949-1.875-.222-.75 0-1.574.45-2.171.453-.602 1.203-.977 2.027-.977h.898a2.53 2.53 0 012.551 2.55zm0 0\"></path>\n    </SvgIcon>\n  );\n}\n","import { SvgIcon, SvgIconProps } from \"@material-ui/core\";\n\nexport function MysticalIcon(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <g>\n        <path d=\"M23.887 11.586c-.192-.316-4.742-7.75-11.887-7.75-7.145 0-11.695 7.434-11.887 7.75a.807.807 0 000 .828c.192.316 4.742 7.75 11.887 7.75 7.145 0 11.695-7.434 11.887-7.75a.807.807 0 000-.828zM12 18.559c-5.336 0-9.21-5.063-10.238-6.559C2.789 10.5 6.652 5.441 12 5.441c5.336 0 9.21 5.063 10.238 6.559-1.027 1.5-4.89 6.559-10.238 6.559zm0 0\"></path>\n        <path d=\"M12 6.598A5.406 5.406 0 006.598 12 5.409 5.409 0 0012 17.402 5.411 5.411 0 0017.402 12 5.406 5.406 0 0012 6.598zm0 9.199A3.801 3.801 0 018.203 12c0-2.094 1.703-3.8 3.797-3.8a3.804 3.804 0 013.797 3.8A3.801 3.801 0 0112 15.797zm0 0\"></path>\n        <path d=\"M12 9.93c-1.145 0-2.07.925-2.07 2.07 0 1.145.925 2.07 2.07 2.07 1.145 0 2.07-.925 2.07-2.07 0-1.145-.925-2.07-2.07-2.07zm0 0\"></path>\n      </g>\n    </SvgIcon>\n  );\n}\n","import { Box, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { Role } from \"../domain\";\nimport { DarkAuraIcon } from \"../Icons/DarkAuraIcon\";\nimport { MysticalIcon } from \"../Icons/MysticalIcon\";\nimport { useFormatRole } from \"../utils\";\n\ntype Props = {\n  role: Role;\n};\n\nexport function RoleCard(props: Props) {\n  const { formatName, formatDescription } = useFormatRole();\n  return (\n    <Card>\n      <CardContent>\n        <Box display=\"flex\" width={1} flexDirection=\"row\">\n          <Box display=\"flex\" width={1}>\n            <Typography gutterBottom variant=\"h5\">\n              {formatName(props.role.id)}\n            </Typography>\n          </Box>\n          <Box display=\"flex\" alignItems=\"center\">\n            {props.role.aura === \"dark\" && <DarkAuraIcon />}\n            {props.role.mystical && <MysticalIcon />}\n          </Box>\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {formatDescription(props.role.id)}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Box, Typography } from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { FormattedMessage } from \"react-intl\";\nimport { PlayerData, roles } from \"../domain\";\nimport { foldShowRoleAction } from \"../gameplay\";\nimport { Stepper } from \"./Common/Stepper\";\nimport { RoleCard } from \"./RoleCard\";\nimport { array, option } from \"fp-ts\";\n\ntype Props = {\n  playersData: PlayerData[];\n  onStartGame: IO<void>;\n};\n\nexport function ShowRole(props: Props) {\n  return (\n    <Box display=\"flex\" width={1} alignItems=\"center\" flexDirection=\"column\">\n      <Box mt={2}>\n        <Typography variant=\"h5\">\n          <FormattedMessage id=\"game.showRole.title\" />\n        </Typography>\n      </Box>\n      <Box mt={2}>\n        <Stepper\n          lastScreen={\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"game.showRole.finish\" />\n            </Typography>\n          }\n          collection={props.playersData}\n          content={(playerData) => (\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n              <Box mb={2}>\n                <Typography variant=\"h6\">{playerData.player.name}</Typography>\n              </Box>\n              <Box display=\"flex\" width={1}>\n                <RoleCard role={roles[playerData.roleId]} />\n              </Box>\n              {pipe(\n                { roleId: playerData.roleId, playersData: props.playersData },\n                foldShowRoleAction({\n                  whenWolves: option.fold(\n                    constant(\n                      <Box mb={2}>\n                        <Typography variant=\"h6\">\n                          <FormattedMessage id=\"game.showRole.noTraitor\" />\n                        </Typography>\n                      </Box>\n                    ),\n                    (traitor) => (\n                      <Box\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                      >\n                        <Box mb={2}>\n                          <Typography variant=\"h6\">\n                            <FormattedMessage\n                              id=\"game.showRole.traitor\"\n                              values={{ name: traitor.name }}\n                            />\n                          </Typography>\n                        </Box>\n                        <Box display=\"flex\" width={1}>\n                          <RoleCard role={roles.traitor} />\n                        </Box>\n                      </Box>\n                    )\n                  ),\n                  whenMonk: option.fold(\n                    constant(\n                      <Box mb={2}>\n                        <Typography variant=\"h6\">\n                          <FormattedMessage id=\"game.showRole.noMissingRole\" />\n                        </Typography>\n                      </Box>\n                    ),\n                    (missingRoles) => (\n                      <Box mb={2}>\n                        <Typography variant=\"h6\">\n                          <FormattedMessage\n                            id=\"game.showRole.missingRole\"\n                            values={{ amount: missingRoles.length }}\n                          />\n                        </Typography>\n                        {pipe(\n                          missingRoles,\n                          array.map((r) => (\n                            <Box display=\"flex\" width={1} mt={2}>\n                              <RoleCard role={r} />\n                            </Box>\n                          ))\n                        )}\n                      </Box>\n                    )\n                  ),\n                  whenPriest: option.fold(\n                    constant(\n                      <Box mb={2}>\n                        <Typography variant=\"h6\">\n                          <FormattedMessage id=\"game.showRole.noSinner\" />\n                        </Typography>\n                      </Box>\n                    ),\n                    (sinner) => (\n                      <Box\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                      >\n                        <Box mb={2}>\n                          <Typography variant=\"h6\">\n                            <FormattedMessage\n                              id=\"game.showRole.sinner\"\n                              values={{ name: sinner.name }}\n                            />\n                          </Typography>\n                        </Box>\n                        <Box display=\"flex\" width={1}>\n                          <RoleCard role={roles.sinner} />\n                        </Box>\n                      </Box>\n                    )\n                  ),\n                })\n              )}\n            </Box>\n          )}\n          onProceed={props.onStartGame}\n        />\n      </Box>\n    </Box>\n  );\n}\n","import { end, format, lit, parse, Route, zero } from \"fp-ts-routing\";\nimport { initializeRouter, Routing } from \"./Router/RouterProvider\";\n\ninterface Home {\n  readonly _tag: \"Home\";\n}\n\ninterface Roles {\n  readonly _tag: \"Roles\";\n}\n\ninterface Game {\n  readonly _tag: \"Game\";\n}\n\ninterface Players {\n  readonly _tag: \"Players\";\n}\n\nexport type Location = Home | Roles | Game | Players;\n\nconst home: Home = { _tag: \"Home\" };\nconst roles: Roles = { _tag: \"Roles\" };\nconst game: Game = { _tag: \"Game\" };\nconst players: Players = { _tag: \"Players\" };\n\nexport const locations = {\n  home,\n  roles,\n  game,\n  players,\n};\n\nconst defaults = end;\nconst rolesMatch = lit(\"roles\").then(end);\nconst gameMatch = lit(\"game\").then(end);\nconst playersMatch = lit(\"players\").then(end);\n\nconst router = zero<Location>()\n  .alt(defaults.parser.map(() => home))\n  .alt(rolesMatch.parser.map(() => roles))\n  .alt(gameMatch.parser.map(() => game))\n  .alt(playersMatch.parser.map(() => players));\n\nfunction parseLocation(s: string): Location {\n  return parse(router, Route.parse(s), home);\n}\n\nfunction formatLocation(l: Location): string {\n  switch (l._tag) {\n    case \"Home\":\n      return format(defaults.formatter, l);\n    case \"Roles\":\n      return format(rolesMatch.formatter, l);\n    case \"Game\":\n      return format(gameMatch.formatter, l);\n    case \"Players\":\n      return format(playersMatch.formatter, l);\n  }\n}\n\nexport const routing: Routing<Location> = {\n  formatLocation,\n  parseLocation,\n};\n\nexport const { RouterProvider, useRouter } = initializeRouter<Location>();\n","import {\n  createContext,\n  useEffect,\n  useState,\n  useContext,\n  Dispatch,\n  SetStateAction,\n} from \"react\";\nimport { Option } from \"fp-ts/Option\";\nimport { array, option, string, nonEmptyArray } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\n\ninterface ILocation {\n  readonly _tag: string;\n}\n\ninterface ILocationFoldable<K extends string> {\n  readonly _tag: K;\n}\n\nexport function foldLocation<\n  K extends string,\n  T extends ILocationFoldable<K>,\n  R\n>(\n  matches: {\n    [L in T[\"_tag\"]]: (args: Omit<Extract<T, { _tag: L }>, \"_tag\">) => R;\n  }\n): (location: T) => R {\n  return (location) => matches[location._tag](location as any);\n}\n\nexport type Routing<T extends ILocation> = {\n  formatLocation: (l: T) => string;\n  parseLocation: (s: string) => T;\n};\n\ntype Props<T extends ILocation> = {\n  routing: Routing<T>;\n  basepath: Option<string>;\n  useHashHistory?: boolean;\n  children: JSX.Element;\n};\n\nexport function initializeRouter<T extends ILocation>() {\n  const RouterContext = createContext<\n    Option<{\n      routing: Routing<T>;\n      location: T;\n      setLocation: Dispatch<SetStateAction<T>>;\n    }>\n  >(option.none);\n\n  const RouterProvider = (props: Props<T>) => {\n    const skipN = pipe(\n      props.basepath,\n      option.map((b) => b.split(\"/\").length + 1),\n      option.getOrElse(constant(0))\n    );\n\n    const pathname = props.useHashHistory\n      ? pipe(\n          window.location.pathname +\n            window.location.search +\n            window.location.hash,\n          string.replace(\"#\", \"\")\n        )\n      : window.location.pathname;\n\n    const getPathname = () =>\n      pipe(\n        pathname,\n        string.split(\"/\"),\n        nonEmptyArray.fromReadonlyNonEmptyArray,\n        array.dropLeft(skipN)\n      ).join(\"/\");\n\n    const [location, setLocation] = useState(\n      props.routing.parseLocation(getPathname())\n    );\n\n    const handleLocationChanges = () => {\n      setLocation(props.routing.parseLocation(getPathname()));\n    };\n\n    useEffect(() => {\n      window.addEventListener(\"popstate\", handleLocationChanges);\n\n      return () => {\n        window.removeEventListener(\"popstate\", handleLocationChanges);\n      };\n    });\n\n    const formatLocation = (l: T) =>\n      pipe(\n        props.basepath,\n        option.map((b) => \"/\" + b),\n        option.getOrElse(constant(\"\"))\n      ) +\n      (props.useHashHistory ? \"/#\" : \"\") +\n      props.routing.formatLocation(l);\n\n    const internalRouting = {\n      parseLocation: props.routing.parseLocation,\n      formatLocation,\n    };\n\n    return (\n      <RouterContext.Provider\n        value={option.some({ routing: internalRouting, location, setLocation })}\n      >\n        {props.children}\n      </RouterContext.Provider>\n    );\n  };\n\n  const useRouter = () => {\n    const ctx = useContext(RouterContext);\n\n    if (option.isNone(ctx)) {\n      throw new Error(\"RouterContext not provided\");\n    }\n\n    const navigateTo = (location: T) => {\n      const newLocation = ctx.value.routing.formatLocation(location);\n      console.log(newLocation);\n      window.history.pushState(null, \"\", newLocation);\n      window.scrollTo(0, 0);\n      ctx.value.setLocation(location);\n    };\n\n    const back = () => {\n      window.history.back();\n    };\n\n    return { current: ctx.value.location, navigateTo, back };\n  };\n\n  return { RouterProvider, useRouter };\n}\n","import { GameData, Player, PlayerData } from \"../domain\";\nimport { generatePlayersData } from \"../gameplay\";\nimport { setValue } from \"../localStorage\";\n\nexport type State =\n  | {\n      view: \"init\";\n      gameData: GameData;\n    }\n  | {\n      view: \"selectPlayers\";\n    }\n  | { view: \"showRole\"; gameData: GameData }\n  | {\n      view: \"night\";\n      gameData: GameData;\n    };\n\ntype Action =\n  | { type: \"startFreshGame\" }\n  | {\n      type: \"assignRoleToPlayer\";\n      payload: Player[];\n    }\n  | {\n      type: \"startNight\";\n    };\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"startFreshGame\":\n      return { view: \"selectPlayers\" };\n    case \"assignRoleToPlayer\":\n      const playersData = generatePlayersData(action.payload);\n      const gameData: GameData = {\n        phase: \"showRole\",\n        playersData,\n        nightNumber: 0,\n        farmerTurnedIntoWolves: [],\n        healerUseHisAbility: false,\n      };\n      setValue(\"gameData\", GameData, gameData);\n      return {\n        view: \"showRole\",\n        gameData: gameData,\n      };\n    case \"startNight\":\n      if (state.view === \"showRole\") {\n        const gameData: GameData = {\n          ...state.gameData,\n          phase: \"night\",\n        };\n        setValue(\"gameData\", GameData, gameData);\n        return {\n          view: \"night\",\n          gameData: gameData,\n        };\n      } else {\n        return state;\n      }\n  }\n}\n\nexport function foldStatus(match: {\n  whenInit: (gameData: GameData) => JSX.Element;\n  whenSelectPlayers: () => JSX.Element;\n  whenShowRole: (playerRoles: PlayerData[]) => JSX.Element;\n  whenNight: (playerRoles: PlayerData[], nightNumber: number) => JSX.Element;\n}): (state: State) => JSX.Element {\n  return (state) => {\n    switch (state.view) {\n      case \"init\":\n        return match.whenInit(state.gameData);\n      case \"selectPlayers\":\n        return match.whenSelectPlayers();\n      case \"showRole\":\n        return match.whenShowRole(state.gameData.playersData);\n      case \"night\":\n        return match.whenNight(\n          state.gameData.playersData,\n          state.gameData.nightNumber\n        );\n    }\n  };\n}\n","import {\n  AppBar,\n  Box,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { ArrowBackSharp } from \"@material-ui/icons\";\nimport { option } from \"fp-ts\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { useReducer } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ConfirmationDialog } from \"../blocks/Common/ConfirmationDialog\";\nimport { Night } from \"../blocks/Night\";\nimport { SelectPlayers } from \"../blocks/SelectPlayers\";\nimport { ShowRole } from \"../blocks/ShowRole\";\nimport { GameData } from \"../domain\";\nimport { getValue } from \"../localStorage\";\nimport { locations, useRouter } from \"../routing\";\nimport { foldStatus, reducer, State } from \"./GameState\";\n\nexport function Game() {\n  const router = useRouter();\n\n  const [state, dispatch] = useReducer(\n    reducer,\n    pipe(\n      getValue(\"gameData\", GameData),\n      option.fold<GameData, State>(\n        constant({ view: \"selectPlayers\" }),\n        (gameData) => ({\n          view: \"init\",\n          gameData: gameData,\n        })\n      )\n    )\n  );\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\" alignItems=\"center\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => router.navigateTo(locations.home)}\n          >\n            <ArrowBackSharp />\n          </IconButton>\n          <Box display=\"flex\" width={1}>\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"players\" />\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      <Box\n        display=\"flex\"\n        m={2}\n        width={1}\n        flexDirection=\"row\"\n        alignItems=\"center\"\n      >\n        {pipe(\n          state,\n          foldStatus({\n            whenInit: (_gameData) => (\n              <ConfirmationDialog\n                open\n                title={<FormattedMessage id=\"game.resumeGame.title\" />}\n                content={<FormattedMessage id=\"game.resumeGame.content\" />}\n                onConfirm={() => {}}\n                onCancel={() => {\n                  localStorage.removeItem(\"gameData\");\n                  dispatch({ type: \"startFreshGame\" });\n                }}\n                confirmLabel=\"game.resumeGame.confirm\"\n                cancelLabel=\"game.resumeGame.cancel\"\n              />\n            ),\n            whenSelectPlayers: constant(\n              <SelectPlayers\n                onNext={(players) =>\n                  dispatch({ type: \"assignRoleToPlayer\", payload: players })\n                }\n              />\n            ),\n            whenShowRole: (playersData) => (\n              <ShowRole\n                playersData={playersData}\n                onStartGame={() => dispatch({ type: \"startNight\" })}\n              />\n            ),\n            whenNight: (playersData, nightNumber) => (\n              <Night\n                playersData={playersData}\n                nightNumber={nightNumber}\n                wolvesDoubleAttack={false}\n                onNightResult={() => {}}\n              />\n            ),\n          })\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { Box, Button, Grid, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport { locations, useRouter } from \"../routing\";\n\n//Bilanciamento ruoli 1 creatura oscura ogni 4 giocatori\n\nexport function Home() {\n  const router = useRouter();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\" alignItems=\"center\">\n      <Typography variant=\"h1\">\n        <FormattedMessage id=\"appTitle\" />\n      </Typography>\n\n      <Box\n        mt={10}\n        width={1}\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n      >\n        <Grid\n          container\n          item\n          xs={6}\n          direction=\"column\"\n          justifyContent=\"center\"\n          spacing={3}\n        >\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => router.navigateTo(locations.game)}\n              fullWidth\n            >\n              <FormattedMessage id=\"game\" />\n            </Button>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => router.navigateTo(locations.roles)}\n              fullWidth\n            >\n              <FormattedMessage id=\"role\" />\n            </Button>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => router.navigateTo(locations.players)}\n              fullWidth\n            >\n              <FormattedMessage id=\"players\" />\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n}\n","import {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Grid,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport { Player } from \"../domain\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { IO } from \"fp-ts//IO\";\nimport { useState } from \"react\";\nimport { ConfirmationDialog } from \"./Common/ConfirmationDialog\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype Props = {\n  player: Player;\n  onDelete: IO<void>;\n};\n\nexport function PlayerCard(props: Props) {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  return (\n    <Grid item xs={6} sm={4} md={3} lg={2}>\n      <Card>\n        <CardMedia></CardMedia>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\">\n            {props.player.name}\n          </Typography>\n        </CardContent>\n        <CardActions disableSpacing>\n          <IconButton\n            aria-label=\"delete\"\n            onClick={() => setDeleteDialogOpen(true)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n      <ConfirmationDialog\n        open={deleteDialogOpen}\n        title={<FormattedMessage id=\"player.delete.confirmDialog.title\" />}\n        content={<FormattedMessage id=\"player.delete.confirmDialog.content\" />}\n        onConfirm={() => {\n          setDeleteDialogOpen(false);\n          props.onDelete();\n        }}\n        onCancel={() => setDeleteDialogOpen(false)}\n      />\n    </Grid>\n  );\n}\n","import { FieldProps } from \"@buildo/formo\";\nimport { TextField as InternalTextField } from \"@material-ui/core\";\nimport { nonEmptyArray, option } from \"fp-ts\";\nimport { pipe } from \"fp-ts/function\";\nimport { NonEmptyArray } from \"fp-ts/NonEmptyArray\";\n\ntype Props = FieldProps<string, string, NonEmptyArray<string>> & {\n  placeholder: string;\n};\n\nexport function TextField(props: Props) {\n  return (\n    <InternalTextField\n      fullWidth\n      label={props.label}\n      defaultValue={props.placeholder}\n      disabled={props.disabled}\n      onChange={(e) => props.onChange(e.currentTarget.value)}\n      onBlur={props.onBlur}\n      value={props.value}\n      name={props.name}\n      error={pipe(props.issues, option.isSome)}\n      helperText={pipe(\n        props.issues,\n        option.map((issues) => pipe(issues, nonEmptyArray.head)),\n        option.toNullable\n      )}\n    />\n  );\n}\n","import { useIntl } from \"react-intl\";\nimport { Validator, validators } from \"@buildo/formo\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { array, either, option } from \"fp-ts\";\nimport { NonEmptyString } from \"io-ts-types/NonEmptyString\";\n\nexport const nonBlankString = (\n  errorMessage: string\n): Validator<string, NonEmptyString, string> =>\n  validators.validator(\n    either.fromPredicate(\n      (s): s is NonEmptyString => s.trim().length > 0,\n      constant(errorMessage)\n    )\n  );\n\nexport const uniqueString =\n  (\n    errorMessage: string\n  ): ((\n    collection: NonEmptyString[]\n  ) => Validator<string, NonEmptyString, string>) =>\n  (collection: NonEmptyString[]) =>\n    validators.validator(\n      either.fromPredicate(\n        (s): s is NonEmptyString =>\n          pipe(\n            collection,\n            array.findFirst((p) => p === s),\n            option.isNone\n          ),\n        constant(errorMessage)\n      )\n    );\n\nexport function useValidators() {\n  const intl = useIntl();\n\n  const defined = <T>() =>\n    validators.defined<T, string>(\n      intl.formatMessage({ id: \"form.validators.defined\" })\n    );\n\n  const definedNoExtract = <T>() =>\n    validators.definedNoExtract<T, string>(\n      intl.formatMessage({ id: \"form.validators.defined\" })\n    );\n\n  const nonBlankStringInternal = nonBlankString(\n    intl.formatMessage({ id: \"form.validators.nonBlankString\" })\n  );\n\n  const uniqueStringInternal = uniqueString(\n    intl.formatMessage({ id: \"form.validators.uniqueString\" })\n  );\n\n  return {\n    nonBlankString: nonBlankStringInternal,\n    uniqueString: uniqueStringInternal,\n    defined,\n    definedNoExtract,\n  };\n}\n","import { useFormo, validators } from \"@buildo/formo\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport { IO } from \"fp-ts/IO\";\nimport { Reader } from \"fp-ts/Reader\";\nimport { NonEmptyString } from \"io-ts-types/lib/NonEmptyString\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { TextField } from \"../Form/TextField\";\nimport { useValidators } from \"../Form/validators\";\nimport { taskEither } from \"fp-ts\";\n\ntype Props = {\n  open: boolean;\n  title: string;\n  playerNames: NonEmptyString[];\n  onConfirm: Reader<NonEmptyString, void>;\n  onCancel: IO<void>;\n};\n\nexport function PlayerForm(props: Props) {\n  const { formatMessage } = useIntl();\n  const { nonBlankString, uniqueString } = useValidators();\n\n  const { fieldProps, handleSubmit } = useFormo(\n    {\n      initialValues: {\n        name: \"\",\n      },\n      fieldValidators: () => ({\n        name: validators.inParallel(\n          nonBlankString,\n          uniqueString(props.playerNames)\n        ),\n      }),\n    },\n    {\n      onSubmit: (values) =>\n        taskEither.fromIO(() => props.onConfirm(values.name)),\n    }\n  );\n\n  return (\n    <Dialog open={props.open} fullWidth onClose={props.onCancel}>\n      <DialogTitle>\n        <FormattedMessage id={props.title} />\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          label={formatMessage({\n            id: \"player.form.label.name\",\n          })}\n          placeholder=\"\"\n          {...fieldProps(\"name\")}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={props.onCancel} color=\"primary\">\n          <FormattedMessage id=\"cancel\" />\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          <FormattedMessage id=\"ok\" />\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import {\n  AppBar,\n  Box,\n  createStyles,\n  Fab,\n  Grid,\n  IconButton,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowBackSharp from \"@material-ui/icons/ArrowBackSharp\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Player } from \"../domain\";\nimport { locations, useRouter } from \"../routing\";\nimport { useLocalStorageState } from \"../useLocalStorageState\";\nimport * as t from \"io-ts\";\nimport { PlayerCard } from \"../blocks/PlayerCard\";\nimport { array } from \"fp-ts\";\nimport { pipe } from \"fp-ts/function\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { PlayerForm } from \"../blocks/PlayerForm\";\nimport { useState } from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: \"absolute\",\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  })\n);\n\nexport function Players() {\n  const classes = useStyles();\n  const router = useRouter();\n\n  const [players, setPlayers] = useLocalStorageState(\n    \"players\",\n    t.array(Player),\n    []\n  );\n\n  const [playerFormOpen, setPlayerFormOpen] = useState(false);\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\" alignItems=\"center\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => router.navigateTo(locations.home)}\n          >\n            <ArrowBackSharp />\n          </IconButton>\n          <Box display=\"flex\" width={1}>\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"players\" />\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      <Box\n        display=\"flex\"\n        m={2}\n        width={1}\n        flexDirection=\"row\"\n        alignItems=\"center\"\n      >\n        <Grid\n          container\n          direction=\"row\"\n          spacing={2}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          {players.map((p) => (\n            <PlayerCard\n              player={p}\n              onDelete={() =>\n                setPlayers(\n                  pipe(\n                    players,\n                    array.filter((m) => m.name !== p.name)\n                  )\n                )\n              }\n            />\n          ))}\n        </Grid>\n        <Fab\n          color=\"primary\"\n          aria-label=\"add\"\n          className={classes.fab}\n          onClick={() => setPlayerFormOpen(true)}\n        >\n          <AddIcon />\n        </Fab>\n        {playerFormOpen && (\n          <PlayerForm\n            open={playerFormOpen}\n            title=\"player.form.label.title\"\n            playerNames={pipe(\n              players,\n              array.map((p) => p.name)\n            )}\n            onCancel={() => setPlayerFormOpen(false)}\n            onConfirm={(name) => {\n              setPlayers([...players, { name }]);\n              setPlayerFormOpen(false);\n            }}\n          />\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { either, option } from \"fp-ts\";\nimport { pipe } from \"fp-ts/function\";\nimport { Type } from \"io-ts\";\nimport { useState } from \"react\";\nimport { getValue, setValue } from \"./localStorage\";\n\nexport function useLocalStorageState<T, TT>(\n  key: string,\n  codec: Type<T, TT>,\n  value: T\n): [T, (value: T) => void] {\n  const initValues = pipe(\n    getValue(key, codec),\n    option.getOrElse(() => {\n      setValue(key, codec, value);\n      return value;\n    })\n  );\n\n  const [reactState, setReactState] = useState(initValues);\n\n  const setState = (value: T) =>\n    pipe(\n      setValue(key, codec, value),\n      either.fold(\n        () => {},\n        () => setReactState(value)\n      )\n    );\n\n  return [reactState, setState];\n}\n","import {\n  Accordion,\n  AccordionSummary,\n  AppBar,\n  Box,\n  Grid,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowBackSharp from \"@material-ui/icons/ArrowBackSharp\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport { FormattedMessage } from \"react-intl\";\nimport { locations, useRouter } from \"../routing\";\nimport { Faction, factions, roles } from \"../domain\";\nimport { pipe } from \"fp-ts/function\";\nimport { array, record } from \"fp-ts\";\nimport { useFormatFaction } from \"../utils\";\nimport { RoleCard } from \"../blocks/RoleCard\";\n\nexport function Roles() {\n  const router = useRouter();\n  const formatFaction = useFormatFaction();\n\n  return (\n    <Box display=\"flex\" width={1} flexDirection=\"column\" alignItems=\"center\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => router.navigateTo(locations.home)}\n          >\n            <ArrowBackSharp />\n          </IconButton>\n          <Box display=\"flex\" width={1}>\n            <Typography variant=\"h6\">\n              <FormattedMessage id=\"role\" />\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n      <Box display=\"flex\" width={1} flexDirection=\"column\" alignItems=\"center\">\n        {pipe(\n          factions,\n          array.map((f: Faction) => (\n            <Accordion key={f}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{formatFaction(f)}</Typography>\n              </AccordionSummary>\n              <Box m={2}>\n                <Grid\n                  container\n                  direction=\"row\"\n                  spacing={2}\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  {pipe(\n                    roles,\n                    record.filter((r) => r.faction === f),\n                    record.toArray,\n                    array.map(([, r]) => (\n                      <Grid item xs={12} sm={6} md={4} lg={3}>\n                        <RoleCard key={r.id} role={r} />\n                      </Grid>\n                    ))\n                  )}\n                </Grid>\n              </Box>\n            </Accordion>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { pipe, constant } from \"fp-ts/function\";\nimport \"./App.css\";\nimport { useBuildConfigContext } from \"./ConfigProvider\";\nimport { Game } from \"./Pages/Game\";\nimport { Home } from \"./Pages/Home\";\nimport { Players } from \"./Pages/Players\";\nimport { Roles } from \"./Pages/Roles\";\nimport { foldLocation } from \"./Router/RouterProvider\";\nimport { RouterProvider, routing, useRouter } from \"./routing\";\n\nfunction InternalApp(): JSX.Element {\n  const router = useRouter();\n\n  return pipe(\n    router.current,\n    foldLocation({\n      Home: constant(<Home />),\n      Roles: constant(<Roles />),\n      Game: constant(<Game />),\n      Players: constant(<Players />),\n    })\n  );\n}\n\nfunction App(): JSX.Element {\n  const buildConfig = useBuildConfigContext();\n\n  return (\n    <RouterProvider\n      basepath={buildConfig.basepath}\n      useHashHistory\n      routing={routing}\n    >\n      <InternalApp />\n    </RouterProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Box, CircularProgress } from \"@material-ui/core\";\n\nexport function Waiting() {\n  return (\n    <Box\n      display=\"flex\"\n      width={1}\n      height={1}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <CircularProgress />\n    </Box>\n  );\n}\n","import { option, taskEither } from \"fp-ts\";\nimport { identity } from \"io-ts\";\nimport { useEffect, useState } from \"react\";\nimport { Option } from \"fp-ts/Option\";\nimport { constant, pipe } from \"fp-ts/function\";\nimport { IntlProvider as InternalIntlProvider } from \"react-intl\";\nimport { Waiting } from \"./blocks/Common/Waiting\";\n\ntype Locale = \"it\";\n\ntype Props = {\n  children: JSX.Element;\n  locale: Locale;\n};\n\nfunction loadLocaleData(locale: Locale) {\n  return taskEither.tryCatch(() => {\n    switch (locale) {\n      case \"it\":\n        return import(\"./messages/it.json\").then((messages) => ({\n          ...messages.default,\n        }));\n    }\n  }, identity);\n}\n\nexport function IntlProvider(props: Props) {\n  const [messages, setMessages] = useState<Option<Record<string, string>>>(\n    option.none\n  );\n\n  useEffect(() => {\n    pipe(\n      loadLocaleData(props.locale),\n      taskEither.map((messages) => setMessages(option.some(messages)))\n    )();\n  }, [props.locale]);\n\n  return pipe(\n    messages,\n    option.fold(constant(<Waiting />), (messages) => (\n      <InternalIntlProvider messages={messages} locale={props.locale}>\n        {props.children}\n      </InternalIntlProvider>\n    ))\n  );\n}\n","import { either } from \"fp-ts\";\nimport * as t from \"io-ts\";\nimport { pipe } from \"fp-ts/function\";\nimport { failure } from \"io-ts/lib/PathReporter\";\nimport { optionFromNullable } from \"io-ts-types/optionFromNullable\";\nimport { NonEmptyString } from \"io-ts-types/NonEmptyString\";\nimport { Option } from \"fp-ts/Option\";\n\nexport type BuildConfig = {\n  basepath: Option<NonEmptyString>;\n};\n\nconst BuildConfigCodec = t.type(\n  {\n    REACT_APP_BASEPATH: optionFromNullable(NonEmptyString),\n  },\n  \"BuildConfig\"\n);\n\nexport const buildConfig: BuildConfig = pipe(\n  BuildConfigCodec.decode(process.env),\n  either.fold(\n    (errors) => {\n      throw new Error(failure(errors).join(\"\\n\"));\n    },\n    (env): BuildConfig => ({\n      basepath: env.REACT_APP_BASEPATH,\n    })\n  )\n);\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { IntlProvider } from \"./IntlProvider\";\nimport { StrictMode } from \"react\";\nimport { BuildConfigProvider } from \"./ConfigProvider\";\nimport { buildConfig } from \"./config\";\n\nconst locale = \"it\";\n\nReactDOM.render(\n  <StrictMode>\n    <BuildConfigProvider {...buildConfig}>\n      <IntlProvider locale={locale}>\n        <App />\n      </IntlProvider>\n    </BuildConfigProvider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}